# Antennae GitLab configuration
# 
.job_template: &job_build  # Hidden key that defines an anchor named 'job_build'
  image: antmounds/cd-builder # docker:stable
  services:
    - docker:dind
  cache:
    untracked: true

variables:
  # When using dind, it's wise to use the overlayfs driver for improved performance.
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  USERNAME: "antmounds"
  IMAGE_NAME: "antennae"
  AWS_IMAGE_URI: 166964003196.dkr.ecr.us-east-1.amazonaws.com/${IMAGE_NAME}
  DOCKERHUB_IMAGE_NAME: ${USERNAME}/${IMAGE_NAME}

stages:
  - build
  - deploy

build_push_aws:
  <<: *job_build
  stage: build
  variables:
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    AWS_DEFAULT_REGION: us-east-1
  before_script:
    # authenticate with the AWS ECR registry
    - $(aws ecr get-login --no-include-email --region us-east-1)
  script: |
    echo "Building the app for AWS Elastic Container Registry"
    DEV=$(echo $GITLAB_USER_LOGIN | tr '[:upper:]' '[:lower:]')
    docker load -i image.tar || true
    docker build --rm -f docker/Dockerfile --cache-from ${AWS_IMAGE_URI} -t $AWS_IMAGE_URI --build-arg BUILD=$CI_PIPELINE_IID .
    docker tag $AWS_IMAGE_URI $AWS_IMAGE_URI:$CI_PIPELINE_IID
    docker save $AWS_IMAGE_URI -o image.tar
    docker push $AWS_IMAGE_URI

build_push_gitlab:
  <<: *job_build
  stage: build
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script: |
    echo "Building the app for Gitlab registry"
    DEV=$(echo $GITLAB_USER_LOGIN | tr '[:upper:]' '[:lower:]')
    docker pull $CI_REGISTRY_IMAGE/dev:$DEV || true
    docker build --rm -f docker/Dockerfile --cache-from $CI_REGISTRY_IMAGE/dev:$DEV -t $CI_REGISTRY_IMAGE --build-arg BUILD=$CI_PIPELINE_IID .
    docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:$CI_PIPELINE_IID
    docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE/dev
    docker tag $CI_REGISTRY_IMAGE/dev $CI_REGISTRY_IMAGE/dev:$DEV
    docker push $CI_REGISTRY_IMAGE
    docker push $CI_REGISTRY_IMAGE/dev
  except:
    - infrastructure

build_push_dockerhub:
  <<: *job_build
  stage: build
  before_script:
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
  script: 
    - echo "Building the app for Dockerhub registry"
    - docker pull $DOCKERHUB_IMAGE_NAME || true
    - docker build --rm -f docker/Dockerfile --cache-from $DOCKERHUB_IMAGE_NAME -t $DOCKERHUB_IMAGE_NAME --build-arg BUILD=$CI_PIPELINE_IID .
    - docker tag $DOCKERHUB_IMAGE_NAME $DOCKERHUB_IMAGE_NAME:$CI_PIPELINE_IID
    # - docker push $DOCKERHUB_IMAGE_NAME (wait till version # is >= CircleCI build_num)
  only:
  - master

deploy_dev:
  image: antmounds/cd-builder
  stage: deploy
  script: |
    aws --version
    docker --version
    docker-compose --version
    terraform --version
  environment:
    name: dev
    url: dev.getantennae.com
  except:
    - master
    - infrastructure

deploy_new:
  image: antmounds/cd-builder
  stage: deploy
  script: |
    aws --version
    docker --version
    docker-compose --version
    terraform --version
  environment:
    name: staging
    url: new.getantennae.com
  only:
    - master

deploy_app:
  image: antmounds/cd-builder
  stage: deploy
  script: |
    aws --version
    docker --version
    docker-compose --version
    terraform --version
  environment:
    name: production
    url: app.getantennae.com
  when: manual
  only:
    - master

deploy_infrastructure:
  image: antmounds/cd-builder
  stage: deploy
  variables:
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
    AWS_DEFAULT_REGION: us-east-1
  script: |
    cd infrastructure/aws-ecs
    terraform init -backend=true -input=false -lock=true -upgrade=true
    terraform plan -input=false -lock=true -refresh=true
    #terraform apply -input=false -lock=true -refresh=true -auto-approve -target=resource -var 'app_version_warm=$CI_PIPELINE_IID'
  environment:
    name: terraform
  when: manual