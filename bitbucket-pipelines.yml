# This is a build pipeline for BitBucket
# -----
# You can specify a custom docker image from Docker Hub as your build environment.
# image: atlassian/default-image:latest

pipelines:
  default:
    - step:
        name: Build
        image: atlassian/pipelines-awscli
        services:
          - docker
        caches:
          - docker
        script: # Modify the commands below to build your repository.
          # Set $DOCKER_HUB_USERNAME and $DOCKER_HUB_PASSWORD as environment variables in repository settings
          - export IMAGE_NAME="${BITBUCKET_REPO_SLUG}:${BITBUCKET_BUILD_NUMBER}"
          - export DOCKERHUB_IMAGE_NAME="${DOCKER_HUB_USERNAME}/${IMAGE_NAME}"
          - export AWS_IMAGE_NAME="166964003196.dkr.ecr.us-east-1.amazonaws.com/${BITBUCKET_REPO_SLUG}:${BITBUCKET_BUILD_NUMBER}"
          #- export IMAGE_NAME=antmounds/moments:$BITBUCKET_COMMIT
          - apt-get install install gettext -y

          - envsubst < src/tools/settings.json.tmpl > src/tools/settings.json
          # copy in creds from s3
          #- aws s3 cp s3://antmounds/creds .

          # build the Docker image (this will use the Dockerfile in the root of the repo)
          - docker build -f Dockerfile-test -t $IMAGE_NAME .
          # authenticate with the Docker Hub registry
          - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
          # tag Docker image for the Dockerhub registry
          - docker tag $IMAGE_NAME $DOCKERHUB_IMAGE_NAME
          # push the new Docker image to the Docker registry
          - docker push $DOCKERHUB_IMAGE_NAME
          # authenticate with the AWS ECR registry
          - $(aws ecr get-login --no-include-email --region us-east-1)
          # tag Docker image for the AWS ECR registry
          - docker tag $IMAGE_NAME $AWS_IMAGE_NAME
          # push the new Docker image to the AWS ECR registry
          - docker push $AWS_IMAGE_NAME
          
    - step:
        # set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY as environment variables
        name: Deploy to ECS
        deployment: test   # set to test, staging or production
        # trigger: manual  # uncomment to have a manual step
        image: atlassian/pipelines-awscli
        services:
          - docker
        script:
          # AWS authentication variables
          # set AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY as environment variables
          # set AWS_SECURITY_TOKEN and AWS_SESSION_TOKEN as environment variables if using temporary credentials via AWS STS
          - export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
          - export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
          - export AWS_DEFAULT_REGION="us-east-1"
          # set image id variables
          - export IMAGE_NAME="${BITBUCKET_REPO_SLUG}:${BITBUCKET_BUILD_NUMBER}"
          - export DOCKER_IMAGE_URI="${DOCKER_HUB_USERNAME}/${IMAGE_NAME}"
          - export AWS_IMAGE_URI="166964003196.dkr.ecr.us-east-1.amazonaws.com/${IMAGE_NAME}"
          # ECS variables
          - export ECS_CLUSTER_NAME="${BITBUCKET_REPO_OWNER}"
          - export ECS_SERVICE_NAME="${BITBUCKET_REPO_SLUG}"
          - export ECS_TASK_NAME="${BITBUCKET_REPO_SLUG}"
          # authenticate with the Docker Hub registry so awscli can pull private images
          #- docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
          # authenticate with the AWS ECR registry
          - $(aws ecr get-login --no-include-email --region us-east-1)
          # Create ECS cluster, task, service
          - aws ecs list-clusters | grep "${ECS_CLUSTER_NAME}" || aws ecs create-cluster --cluster-name "${ECS_CLUSTER_NAME}"
          # Updating the existing cluster, task, service
          - echo "Docker image uri:" "${DOCKER_IMAGE_URI}"
          - echo "AWS image uri:" "${AWS_IMAGE_URI}"
          - export TASK_VERSION=$(aws ecs register-task-definition
            --family "${ECS_TASK_NAME}"
            --execution-role-arn "arn:aws:iam::166964003196:role/ecsExecutionRole"
            --network-mode "awsvpc"
            --requires-compatibilities "FARGATE"
            --container-definitions
            '[{"name":"app","image":"${AWS_IMAGE_URI}","portMappings":[{"containerPort":3000,"hostPort":3000}],"essential":true,"environment":[{"name":"AWS_ACCESS_KEY_ID","value":$AWS_ACCESS_KEY_ID},{"name":"AWS_SECRET_ACCESS_KEY","value":$AWS_SECRET_ACCESS_KEY},{"name":"MONGO_URL","value":$MONGO_URL}],"logConfiguration":{"logDriver":"awslogs","options":{"awslogs-region":"us-east-1","awslogs-group":"moment-app-logs","awslogs-stream-prefix":"moment-app"}}}]'
            --cpu 256
            --memory 1024
            | jq --raw-output '.taskDefinition.revision')
          - echo "Registered ECS Task Definition:" "${TASK_VERSION}"
          # Create ECS Service
          - aws ecs list-services --cluster "${ECS_CLUSTER_NAME}"  | grep "${ECS_SERVICE_NAME}" || aws ecs create-service --service-name "${ECS_SERVICE_NAME}" --cluster "${ECS_CLUSTER_NAME}" --task-definition "${ECS_TASK_NAME}" --desired-count 1 --launch-type "FARGATE" --network-configuration "awsvpcConfiguration={subnets=['subnet-915e4ccc','subnet-b18169d6'],securityGroups=['sg-6c378a25'],assignPublicIp='ENABLED'}" --load-balancers "targetGroupArn=arn:aws:elasticloadbalancing:us-east-1:166964003196:targetgroup/moments-tg/ff996b474e380c02,containerName=app,containerPort=3000"
          - aws ecs update-service --cluster "${ECS_CLUSTER_NAME}" --service "${ECS_SERVICE_NAME}" --task-definition "${ECS_TASK_NAME}:${TASK_VERSION}"