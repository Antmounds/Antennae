{"version":3,"sources":["meteor://ğŸ’»app/imports/api/moments/methods.js","meteor://ğŸ’»app/imports/startup/server/index.js","meteor://ğŸ’»app/imports/startup/server/register-api.js","meteor://ğŸ’»app/server/main.js"],"names":["DDPRateLimiter","module","watch","require","v","AWS","default","config","region","rekognition","Rekognition","Meteor","methods","picData","console","log","t0","Date","getTime","imgBytes","Buffer","from","split","moderationParams","labelParams","faceParams","moderationRequest","detectModerationLabels","labelRequest","detectLabels","faceRequest","detectFaces","promise1","promise","promise2","promise3","response","Promise","all","catch","error","Error","code","message","then","values","t1","reason","details","finally","runScanRule","type","name","addRule","HTTP","server_mode","isProduction","JSON","stringify","settings","getData","results","call","data","headers","e","onConnection","connection","clientAddr","clientAddress","httpHeaders","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import { DDPRateLimiter } from 'meteor/ddp-rate-limiter';\nimport AWS from 'aws-sdk';\n\nAWS.config.region = 'us-east-1';\n\nvar rekognition = new AWS.Rekognition();\n\nMeteor.methods({\n\t\"moment.scan\"(picData){\n\t\t//return 1;\n\t\tconsole.log(\"ANALYZING IMAGE...\");\n\t\tvar t0 = new Date().getTime();\n\t\tlet imgBytes = new Buffer.from(picData.split(\",\")[1], \"base64\");\n\t\tlet moderationParams = {\n\t\t\t\"Image\": { \n\t\t\t\t\"Bytes\": imgBytes,\n\t\t\t},\n\t\t\t\"MinConfidence\": 50,\n\t\t};\n\t\tlet labelParams = {\n\t\t\t\"Image\": { \n\t\t\t\t\"Bytes\": imgBytes,\n\t\t\t},\n\t\t\t\"MaxLabels\": 20,\n\t\t\t\"MinConfidence\": 75,\n\t\t};\n\t\tlet faceParams = {\n\t\t\t\"Image\": { \n\t\t\t\t\"Bytes\": imgBytes,\n\t\t\t},\n  \t\t\t\"Attributes\": [\"ALL\"],\n\t\t};\n\t\t// create request objects\n\t\tlet moderationRequest = rekognition.detectModerationLabels(moderationParams);\n\t\tlet labelRequest = rekognition.detectLabels(labelParams);\n\t\tlet faceRequest = rekognition.detectFaces(faceParams);\n\t\t// create promises\n\t\tlet promise1 = moderationRequest.promise();\n\t\tlet promise2 = labelRequest.promise();\n\t\tlet promise3 = faceRequest.promise();\n\t\t// Fulfill promises in parallel\n\t\t// return Promise.all([\n\t\t// \tpromise1.catch(error => { return error }),\n\t\t// \tpromise2.catch(error => { return error }),\n\t\t// \tpromise3.catch(error => { return error }),\n\t\t// ]).then(values => {\n\t\t// \tconsole.log(values[0]);\n\t\t// \tconsole.log(values[1]);\n\t\t// \tconsole.log(values[2]);\n\t\t// \tlet t1 = new Date().getTime();\n\t\t// \tconsole.log(`Request took ${t1 - t0} ms`);\n\t\t// \treturn values;\n\t\t// });\n\t\t//return {};\n\t\tlet response = Promise.all([\n\t\t\tpromise1.catch(error => { throw new Meteor.Error(error.code, error.message, error);return error; }),\n\t\t\tpromise2.catch(error => { throw new Meteor.Error(error.code, error.message, error);return error; }),\n\t\t\tpromise3.catch(error => { throw new Meteor.Error(error.code, error.message, error);return error; }),\n\t\t]).then(values => {\n\t\t\tconsole.log(values[0]);\n\t\t\tconsole.log(values[1]);\n\t\t\tconsole.log(values[2]);\n\t\t\tlet t1 = new Date().getTime();\n\t\t\tconsole.log(`Response took ${t1 - t0} ms`);\n\t\t\treturn values;\n\t\t}).catch(error => {\n\t\t\tconsole.log('caught error!');\n\t\t\tconsole.log(error);\n\t\t\tthrow new Meteor.Error(error.error, error.reason, error.details);\n\t\t}).finally(() => {\n\t\t\tconsole.log('finally');\n\t\t\tconsole.log(this);\n\t\t});\n\t\tconsole.log(response);\n\t\tlet t1 = new Date().getTime();\n\t\tconsole.log(`Request took ${t1 - t0} ms`);\n\t\treturn response;\n\t}\n})\n\n// Define a rule to limit method calls\nlet runScanRule = {\n\ttype: 'method',\n\tname: 'moment.scan'\n};\n// Add the rule, allowing up to 1 scan every 20 seconds\nDDPRateLimiter.addRule(runScanRule, 1, 1000);","import { Meteor } from 'meteor/meteor';\nimport { HTTP } from 'meteor/http';\n// import AWS from 'aws-sdk';\n// import '../accounts-config.js';\n// This defines all the collections, publications and methods that the application provides\n// as an API to the client.\nimport './register-api.js';\n// import './fixtures.js';\n\n\n\nvar server_mode = Meteor.isProduction ? \"PRODUCTION\" : \"DEVELOPMENT\";\nconsole.log('index.js: ' + server_mode + \"-->\" + JSON.stringify(Meteor.settings));\n\nMeteor.methods({\n\n\tasync getData(){    \n\t\ttry{\n\t\t\tvar response = {};\n\t\t\tconst results = await HTTP.call('GET', 'http://jsonplaceholder.typicode.com/posts');\t\n\t\t\tconsole.log(JSON.stringify(results.data[0]));\t\n\t\t\tconsole.log(JSON.stringify(results.headers));\n\t\t\tresponse.code = true;\t\t\n\t\t\tresponse.data = results;\t\n\t\t} catch(e){\n\t\t\tresponse = false;\n\t\t\tconsole.log(e);\n\t\t} finally {\n\t\t\tconsole.log(\"finally...\")\n\t\t\t//throw new Meteor.Error(\"inappropriate-pic\",\"The user has taken an inappropriate picture.\");\t\n\t\t\treturn response;\n\t\t}\n\t}\n\n});\n\nMeteor.onConnection((connection)=>{\n\tlet clientAddr = connection.clientAddress;\n\tlet headers = connection.httpHeaders;\n\tconsole.log(`connection from ${clientAddr}`);\n\t// console.log(headers);\n})","import '../../api/moments/methods.js'","import '../imports/startup/server';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}